#ifndef GLWINDOW_H__
#define GLWINDOW_H__


#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/TransformStack.h>
#include <ngl/Text.h>
#include <ngl/Material.h>
#include <QTime>
#include <QEvent>
#include <QResizeEvent>
#include <ngl/VertexArrayObject.h>
#include "GLData.h"
#include "Object.h"
#include "Camera.h"
#include "PulseManager.h"
#include "Texture.h"

/// @file GLWindow.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Jonathan Macey
/// @version 2.0
/// @date 10/10/10
/// Revision History :
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class GLWindow
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
class GLWindow : public QGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
    friend class MainWindow;
public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for GLWindow
    /// @param [in] _parent the parent window to create the GL context in
    //----------------------------------------------------------------------------------------------------------------------
    GLWindow(
              QWidget *_parent
            );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that polygonise the object and builds a VAO ready to be rendered
    //----------------------------------------------------------------------------------------------------------------------
    void buildVAO(const GLData *data);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that load the hyperspectral data and changes the shader from Gold to texture
    //----------------------------------------------------------------------------------------------------------------------
    void loadHyperspectral(
            const std::string i_filename,
            const std::vector<unsigned short int> &i_bands
    );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~GLWindow();

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vao;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the vertices normals of the object
    //----------------------------------------------------------------------------------------------------------------------
    GLData m_glData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the object that we want to polygonise and render in the GLWindow
    //----------------------------------------------------------------------------------------------------------------------
    Object *m_object;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple light use to illuminate the screen
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Light *m_light;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current zoom
    //----------------------------------------------------------------------------------------------------------------------
    double m_zoom;

    ngl::Material m_material;

    Texture m_texture;

    /// 1 for texture and 0 for phong
    bool m_shaderMode;

    GLuint m_currentTextureName;

protected:
    void loadMatricesToShader(
                               ngl::TransformStack &_tx
                              );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  The following methods must be implimented in the sub class
    /// this is called when the window is created
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called whenever the window is re-sized
    /// @param[in] _w the width of the resized window
    /// @param[in] _h the height of the resized window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(
                    const int _w,
                    const int _h
                  );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is the main gl drawing routine which is called whenever the window needs to
    /// be re-drawn
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that changes the type of the shader. Either texture or Gold
    //----------------------------------------------------------------------------------------------------------------------
    void changeShaderMode(bool i_shaderMode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that processes the key events and ajusts the camera accordingly
    /// @param[in] i_event the event that indicated which button was pressed
    /// @param[in] i_step how much to rotate or move the camera
    //----------------------------------------------------------------------------------------------------------------------
    void processKeyPress(QKeyEvent *i_event, float i_step);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the object to the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (
                          QMouseEvent * _event
                        );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (
                            QMouseEvent *_event
                         );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (
                            QMouseEvent *_event
                            );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent(
                      QWheelEvent *_event
                   );


};

#endif
